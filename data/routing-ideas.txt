Idea's for authentication

- log in page - 
-- server side post
-- set cookie w/ jwt & csrf (still server)
-- do nothing with return post data?
-- set (set-cookie header or just raw headers?) fetchHeaders to locals in handle hook
-- set { headers: locals.fetchHeaders } on any server side request

- handle hook
-- set fetch headers if we have a cookie (or jwt/csrf) header
-- set event cookies to locals if they exist

- some +page.ts or +layout.ts(?)
-- data = await parent()
-- if data.jwt && !data.userdata // we have a token but have not validated
-- then post(?) to /user/validate - data.csrftoken header, data.jwt body
-- /user/validate has csrf protection, but no auth required
-- if the token is valid, response.set_cookie(**details_from_the_cookie)
-- return user data (maybe other?)
-- back in +whatever.ts return the user (and other) data then set in the store

I like the idea of this happening in game/[joincode]/+layout.ts as we really
only need client auth thereand it sets up the web socket

we definitly need to close the loop on multiple socket connections though
- is it ok to open/close per endpoint?
- initialize the socket in [joincode]/+layout.svelte? (then we can close in unmount)
- best would be +layout not running on every route

