# Generated by Django 4.2a1 on 2023-03-02 13:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [
        ("game", "0001_initial"),
        ("game", "0002_alter_team_members"),
        ("game", "0003_game_question_triviaevent_gameround_gamequestion_and_more"),
        ("game", "0004_alter_eventquestionstate_options_and_more"),
        ("game", "0005_location_created_at"),
        ("game", "0006_response"),
        ("game", "0007_questionanswer_questionresponse_and_more"),
        ("game", "0008_question_accepted_answers_question_display_answer"),
        ("game", "0009_rename_scored_questionresponse_locked"),
        ("game", "0010_rename_join_code_triviaevent_joincode_and_more"),
        ("game", "0011_leaderboard_alter_question_accepted_answers_and_more"),
        ("game", "0012_alter_leaderboard_options_triviaevent_event_teams_and_more"),
        ("game", "0013_alter_leaderboard_options_and_more"),
        ("game", "0014_alter_leaderboardentry_event_and_more"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(max_length=200)),
                ("password", models.CharField(max_length=200, unique=True)),
                (
                    "members",
                    models.ManyToManyField(
                        related_name="teams", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("block_code", models.CharField(default="", max_length=150)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, null=True)),
                ("date_used", models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                "ordering": ["-date_used", "title"],
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "question_type",
                    models.IntegerField(
                        choices=[
                            (0, "General Knowledge"),
                            (1, "Themed Round"),
                            (2, "Word Play"),
                            (3, "Image Round"),
                            (4, "Lightning Round"),
                            (5, "Sound Round"),
                            (6, "Tiebreaker"),
                        ],
                        default=0,
                    ),
                ),
                ("question_text", models.TextField()),
                (
                    "question_url",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "answer_notes",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TriviaEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("date", models.DateField(default=django.utils.timezone.now)),
                (
                    "join_code",
                    models.CharField(db_index=True, max_length=64, unique=True),
                ),
                ("current_round_number", models.IntegerField(default=1)),
                ("current_question_number", models.IntegerField(default=1)),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="game.game"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GameRound",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("title", models.CharField(max_length=128)),
                ("round_description", models.TextField(blank=True, default="")),
                ("round_number", models.IntegerField()),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="game_rounds",
                        to="game.game",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GameQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("round_number", models.IntegerField()),
                ("question_number", models.IntegerField()),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="game_questions",
                        to="game.game",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="game.question"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventQuestionState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("question_number", models.IntegerField()),
                ("round_number", models.IntegerField()),
                ("question_displayed", models.BooleanField(default=False)),
                ("answer_displayed", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_states",
                        to="game.triviaevent",
                    ),
                ),
            ],
            options={
                "ordering": ["event", "round_number", "question_number"],
            },
        ),
        migrations.CreateModel(
            name="EventRoundState",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("round_number", models.IntegerField()),
                ("locked", models.BooleanField(default=False)),
                ("scored", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="round_states",
                        to="game.triviaevent",
                    ),
                ),
            ],
            options={
                "ordering": ["event", "round_number"],
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("address", models.TextField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "primary_host",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, default=django.utils.timezone.now
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="triviaevent",
            name="location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="game.location",
            ),
        ),
        migrations.CreateModel(
            name="QuestionAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("text", models.CharField(db_index=True, max_length=255, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name="question",
            name="display_answer",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="display_answer",
                to="game.questionanswer",
            ),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="QuestionResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("recorded_answer", models.TextField(default="")),
                ("fuzz_ratio", models.IntegerField(default=0)),
                ("points_awarded", models.FloatField(default=0)),
                ("funny", models.BooleanField(default=False)),
                ("locked", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="game.triviaevent",
                    ),
                ),
                (
                    "game_question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="game.gamequestion",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="game.team",
                    ),
                ),
            ],
        ),
        migrations.RenameField(
            model_name="triviaevent",
            old_name="join_code",
            new_name="joincode",
        ),
        migrations.AddField(
            model_name="question",
            name="accepted_answers",
            field=models.ManyToManyField(
                blank=True, related_name="accepted_answers", to="game.questionanswer"
            ),
        ),
        migrations.CreateModel(
            name="TiebreakerQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "game",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tiebreaker_questions",
                        to="game.game",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="game.question"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="triviaevent",
            name="event_teams",
            field=models.ManyToManyField(
                blank=True, related_name="event_teams", to="game.team"
            ),
        ),
        migrations.AddField(
            model_name="triviaevent",
            name="player_limit",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="triviaevent",
            name="players",
            field=models.ManyToManyField(
                blank=True, related_name="players", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Leaderboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "event",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaderboards",
                        to="game.triviaevent",
                    ),
                ),
                ("host_through_round", models.IntegerField(blank=True, null=True)),
                ("public_through_round", models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="LeaderboardEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("rank", models.IntegerField(blank=True, null=True)),
                ("tiebreaker_rank", models.IntegerField(blank=True, null=True)),
                ("total_points", models.FloatField(default=0)),
                (
                    "leaderboard",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        related_query_name="leaderboard_entry",
                        to="game.leaderboard",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teams",
                        to="game.team",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaderboard_entries",
                        related_query_name="leaderboard_entry",
                        to="game.triviaevent",
                    ),
                ),
                (
                    "leaderboard_type",
                    models.IntegerField(
                        choices=[(0, "Host"), (1, "Public")], default=0
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Leaderboard Entries",
                "ordering": ["event", "rank", "tiebreaker_rank", "pk"],
                "unique_together": {("team", "event", "leaderboard_type")},
            },
        ),
    ]
